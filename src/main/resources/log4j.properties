#优先级从高到低分别是ERROR>WARN>INFO>DEBUG 等级越高日志越少
log4j.rootLogger=INFO, Console, RollingFile

#控制台
#　　org.apache.log4j.ConsoleAppender（控制台），
#　　org.apache.log4j.FileAppender（文件），
#　　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#　　org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#　　org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.Console=org.apache.log4j.ConsoleAppender

#控制台的输出格式
#　　org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#　　org.apache.log4j.PatternLayout（可以灵活地指定布局模式），需指定log4j.appender.Console.layout.ConversionPattern
#　　org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#　　org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.Console.layout=org.apache.log4j.PatternLayout

#控制台输出匹配的格式
#　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r 输出自应用启动到输出该log信息耗费的毫秒数
#　　%c 输出所属的类目，通常就是所在类的全名
#　　%t 输出产生该日志事件的线程名
#　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#　　%d 输出日志时间点的日期或时间，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n

#文件 - 每天产生一个文件
log4j.appender.RollingFile=org.apache.log4j.DailyRollingFileAppender
#文件名
log4j.appender.RollingFile.DatePattern='.'yyyy-MM-dd
#文件输出地址
log4j.appender.RollingFile.File=F:/PenguinLogs/star.log4j
log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFile.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n

#特定包的日志级别设定
#log4j.logger.java.sql=DEBUG

#log4j.logger.org.springframework=ERROR

#log4j.logger.org.activiti.engine.impl.persistence=DEBUG

#log4j.logger.org.apache.shiro=DEBUG
